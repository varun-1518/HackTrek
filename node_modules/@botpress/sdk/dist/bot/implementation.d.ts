import type { Server } from 'node:http';
import * as utils from '../utils';
import { MessageHandler, EventHandler, StateExpiredHandler, HookImplementationsMap, HookImplementations, ActionHandlers } from './server';
import { BaseBot } from './types';
export type BotImplementationProps<TBot extends BaseBot = BaseBot> = {
    actions: ActionHandlers<TBot>;
};
export declare class BotImplementation<TBot extends BaseBot = BaseBot> {
    readonly props: BotImplementationProps<TBot>;
    readonly actionHandlers: ActionHandlers<TBot>;
    readonly messageHandlers: MessageHandler<TBot>[];
    readonly eventHandlers: EventHandler<TBot>[];
    readonly stateExpiredHandlers: StateExpiredHandler<TBot>[];
    readonly hooks: HookImplementationsMap<TBot>;
    constructor(props: BotImplementationProps<TBot>);
    readonly message: (handler: MessageHandler<TBot>) => void;
    readonly event: (handler: EventHandler<TBot>) => void;
    readonly stateExpired: (handler: StateExpiredHandler<TBot>) => void;
    readonly hook: {
        before_incoming_event: <T_2 extends "*" | keyof TBot["events"] | keyof utils.types.UnionToIntersection<(TBot["integrations"] extends infer T ? { [TIntegrationName in keyof T]: TBot["integrations"][TIntegrationName]["events"] extends infer T_1 ? { [TEventName in keyof T_1 as string extends utils.types.Cast<TIntegrationName, string> ? utils.types.Cast<TIntegrationName, string> & string : string extends utils.types.Cast<TEventName, string> ? utils.types.Cast<TEventName, string> & string : `${utils.types.Cast<utils.types.Cast<TIntegrationName, string>, string>}:${utils.types.Cast<utils.types.Cast<TEventName, string>, string>}`]: TBot["integrations"][TIntegrationName]["events"][TEventName]; } : never; } : never)[keyof TBot["integrations"]]>>(type: T_2, handler: ((import("./types").EnumerateEvents<TBot> extends infer T_7 ? { [K in keyof T_7]: utils.types.Merge<import("@botpress/client").Event, {
            type: K;
            payload: import("./types").EnumerateEvents<TBot>[K];
        }>; } : never) & {
            '*': import("./server").IncomingEvent<TBot>;
        } extends infer T_3 ? { [T_4 in keyof T_3]: (input: ((import("./types").EnumerateEvents<TBot> extends infer T_7 ? { [K in keyof T_7]: utils.types.Merge<import("@botpress/client").Event, {
            type: K;
            payload: import("./types").EnumerateEvents<TBot>[K];
        }>; } : never) & {
            '*': import("./server").IncomingEvent<TBot>;
        } extends infer T_5 ? { [T_6 in keyof T_5]: {
            client: import("./client").BotSpecificClient<TBot>;
            ctx: import("./server").BotContext;
            data: ((import("./types").EnumerateEvents<TBot> extends infer T_7 ? { [K in keyof T_7]: utils.types.Merge<import("@botpress/client").Event, {
                type: K;
                payload: import("./types").EnumerateEvents<TBot>[K];
            }>; } : never) & {
                '*': import("./server").IncomingEvent<TBot>;
            })[T_6];
        }; } : never)[T_4]) => Promise<void | ((import("./types").EnumerateEvents<TBot> extends infer T_7 ? { [K in keyof T_7]: utils.types.Merge<import("@botpress/client").Event, {
            type: K;
            payload: import("./types").EnumerateEvents<TBot>[K];
        }>; } : never) & {
            '*': import("./server").IncomingEvent<TBot>;
        } extends infer T_8 ? { [T_9 in keyof T_8]: {
            data: ((import("./types").EnumerateEvents<TBot> extends infer T_7 ? { [K in keyof T_7]: utils.types.Merge<import("@botpress/client").Event, {
                type: K;
                payload: import("./types").EnumerateEvents<TBot>[K];
            }>; } : never) & {
                '*': import("./server").IncomingEvent<TBot>;
            })[T_9];
        }; } : never)[T_4] | undefined>; } : never)[T_2]) => void;
        before_incoming_message: <T_10 extends "*" | keyof import("./types").GetMessages<TBot>>(type: T_10, handler: ((import("./types").GetMessages<TBot> extends infer T_15 ? { [K_1 in keyof T_15]: utils.types.Merge<import("@botpress/client").Message, {
            type: K_1;
            payload: import("./types").GetMessages<TBot>[K_1];
        }>; } : never) & {
            '*': import("./server").IncomingMessage<TBot>;
        } extends infer T_11 ? { [T_12 in keyof T_11]: (input: ((import("./types").GetMessages<TBot> extends infer T_15 ? { [K_1 in keyof T_15]: utils.types.Merge<import("@botpress/client").Message, {
            type: K_1;
            payload: import("./types").GetMessages<TBot>[K_1];
        }>; } : never) & {
            '*': import("./server").IncomingMessage<TBot>;
        } extends infer T_13 ? { [T_14 in keyof T_13]: {
            client: import("./client").BotSpecificClient<TBot>;
            ctx: import("./server").BotContext;
            data: ((import("./types").GetMessages<TBot> extends infer T_15 ? { [K_1 in keyof T_15]: utils.types.Merge<import("@botpress/client").Message, {
                type: K_1;
                payload: import("./types").GetMessages<TBot>[K_1];
            }>; } : never) & {
                '*': import("./server").IncomingMessage<TBot>;
            })[T_14];
        }; } : never)[T_12]) => Promise<void | ((import("./types").GetMessages<TBot> extends infer T_15 ? { [K_1 in keyof T_15]: utils.types.Merge<import("@botpress/client").Message, {
            type: K_1;
            payload: import("./types").GetMessages<TBot>[K_1];
        }>; } : never) & {
            '*': import("./server").IncomingMessage<TBot>;
        } extends infer T_16 ? { [T_17 in keyof T_16]: {
            data: ((import("./types").GetMessages<TBot> extends infer T_15 ? { [K_1 in keyof T_15]: utils.types.Merge<import("@botpress/client").Message, {
                type: K_1;
                payload: import("./types").GetMessages<TBot>[K_1];
            }>; } : never) & {
                '*': import("./server").IncomingMessage<TBot>;
            })[T_17];
        }; } : never)[T_12] | undefined>; } : never)[T_10]) => void;
        before_outgoing_message: <T_18 extends "*" | keyof import("./types").GetMessages<TBot>>(type: T_18, handler: ((import("./types").GetMessages<TBot> extends infer T_23 ? { [K_2 in keyof T_23]: utils.types.Merge<{
            payload: {
                [x: string]: any;
            };
            userId: string;
            conversationId: string;
            type: string;
            tags: {
                [x: string]: string;
            };
            schedule?: {
                dateTime?: string | undefined;
                delay?: number | undefined;
            } | undefined;
        }, {
            type: K_2;
            payload: import("./types").GetMessages<TBot>[K_2];
        }>; } : never) & {
            '*': import("./server").OutgoingMessageRequest<TBot>;
        } extends infer T_19 ? { [T_20 in keyof T_19]: (input: ((import("./types").GetMessages<TBot> extends infer T_23 ? { [K_2 in keyof T_23]: utils.types.Merge<{
            payload: {
                [x: string]: any;
            };
            userId: string;
            conversationId: string;
            type: string;
            tags: {
                [x: string]: string;
            };
            schedule?: {
                dateTime?: string | undefined;
                delay?: number | undefined;
            } | undefined;
        }, {
            type: K_2;
            payload: import("./types").GetMessages<TBot>[K_2];
        }>; } : never) & {
            '*': import("./server").OutgoingMessageRequest<TBot>;
        } extends infer T_21 ? { [T_22 in keyof T_21]: {
            client: import("./client").BotSpecificClient<TBot>;
            ctx: import("./server").BotContext;
            data: ((import("./types").GetMessages<TBot> extends infer T_23 ? { [K_2 in keyof T_23]: utils.types.Merge<{
                payload: {
                    [x: string]: any;
                };
                userId: string;
                conversationId: string;
                type: string;
                tags: {
                    [x: string]: string;
                };
                schedule?: {
                    dateTime?: string | undefined;
                    delay?: number | undefined;
                } | undefined;
            }, {
                type: K_2;
                payload: import("./types").GetMessages<TBot>[K_2];
            }>; } : never) & {
                '*': import("./server").OutgoingMessageRequest<TBot>;
            })[T_22];
        }; } : never)[T_20]) => Promise<void | ((import("./types").GetMessages<TBot> extends infer T_23 ? { [K_2 in keyof T_23]: utils.types.Merge<{
            payload: {
                [x: string]: any;
            };
            userId: string;
            conversationId: string;
            type: string;
            tags: {
                [x: string]: string;
            };
            schedule?: {
                dateTime?: string | undefined;
                delay?: number | undefined;
            } | undefined;
        }, {
            type: K_2;
            payload: import("./types").GetMessages<TBot>[K_2];
        }>; } : never) & {
            '*': import("./server").OutgoingMessageRequest<TBot>;
        } extends infer T_24 ? { [T_25 in keyof T_24]: {
            data: ((import("./types").GetMessages<TBot> extends infer T_23 ? { [K_2 in keyof T_23]: utils.types.Merge<{
                payload: {
                    [x: string]: any;
                };
                userId: string;
                conversationId: string;
                type: string;
                tags: {
                    [x: string]: string;
                };
                schedule?: {
                    dateTime?: string | undefined;
                    delay?: number | undefined;
                } | undefined;
            }, {
                type: K_2;
                payload: import("./types").GetMessages<TBot>[K_2];
            }>; } : never) & {
                '*': import("./server").OutgoingMessageRequest<TBot>;
            })[T_25];
        }; } : never)[T_20] | undefined>; } : never)[T_18]) => void;
        before_call_action: <T_26 extends "*" | keyof import("./types").EnumerateActions<TBot>>(type: T_26, handler: ((import("./types").EnumerateActionInputs<TBot> extends infer T_31 ? { [K_3 in keyof T_31]: utils.types.Merge<{
            type: string;
            input: {
                [x: string]: any;
            };
        }, {
            type: K_3;
            input: import("./types").EnumerateActionInputs<TBot>[K_3];
        }>; } : never) & {
            '*': import("./server").OutgoingCallActionRequest<TBot>;
        } extends infer T_27 ? { [T_28 in keyof T_27]: (input: ((import("./types").EnumerateActionInputs<TBot> extends infer T_31 ? { [K_3 in keyof T_31]: utils.types.Merge<{
            type: string;
            input: {
                [x: string]: any;
            };
        }, {
            type: K_3;
            input: import("./types").EnumerateActionInputs<TBot>[K_3];
        }>; } : never) & {
            '*': import("./server").OutgoingCallActionRequest<TBot>;
        } extends infer T_29 ? { [T_30 in keyof T_29]: {
            client: import("./client").BotSpecificClient<TBot>;
            ctx: import("./server").BotContext;
            data: ((import("./types").EnumerateActionInputs<TBot> extends infer T_31 ? { [K_3 in keyof T_31]: utils.types.Merge<{
                type: string;
                input: {
                    [x: string]: any;
                };
            }, {
                type: K_3;
                input: import("./types").EnumerateActionInputs<TBot>[K_3];
            }>; } : never) & {
                '*': import("./server").OutgoingCallActionRequest<TBot>;
            })[T_30];
        }; } : never)[T_28]) => Promise<void | ((import("./types").EnumerateActionInputs<TBot> extends infer T_31 ? { [K_3 in keyof T_31]: utils.types.Merge<{
            type: string;
            input: {
                [x: string]: any;
            };
        }, {
            type: K_3;
            input: import("./types").EnumerateActionInputs<TBot>[K_3];
        }>; } : never) & {
            '*': import("./server").OutgoingCallActionRequest<TBot>;
        } extends infer T_32 ? { [T_33 in keyof T_32]: {
            data: ((import("./types").EnumerateActionInputs<TBot> extends infer T_31 ? { [K_3 in keyof T_31]: utils.types.Merge<{
                type: string;
                input: {
                    [x: string]: any;
                };
            }, {
                type: K_3;
                input: import("./types").EnumerateActionInputs<TBot>[K_3];
            }>; } : never) & {
                '*': import("./server").OutgoingCallActionRequest<TBot>;
            })[T_33];
        }; } : never)[T_28] | undefined>; } : never)[T_26]) => void;
        after_incoming_event: <T_34 extends "*" | keyof TBot["events"] | keyof utils.types.UnionToIntersection<(TBot["integrations"] extends infer T ? { [TIntegrationName in keyof T]: TBot["integrations"][TIntegrationName]["events"] extends infer T_1 ? { [TEventName in keyof T_1 as string extends utils.types.Cast<TIntegrationName, string> ? utils.types.Cast<TIntegrationName, string> & string : string extends utils.types.Cast<TEventName, string> ? utils.types.Cast<TEventName, string> & string : `${utils.types.Cast<utils.types.Cast<TIntegrationName, string>, string>}:${utils.types.Cast<utils.types.Cast<TEventName, string>, string>}`]: TBot["integrations"][TIntegrationName]["events"][TEventName]; } : never; } : never)[keyof TBot["integrations"]]>>(type: T_34, handler: ((import("./types").EnumerateEvents<TBot> extends infer T_7 ? { [K in keyof T_7]: utils.types.Merge<import("@botpress/client").Event, {
            type: K;
            payload: import("./types").EnumerateEvents<TBot>[K];
        }>; } : never) & {
            '*': import("./server").IncomingEvent<TBot>;
        } extends infer T_35 ? { [T_36 in keyof T_35]: (input: ((import("./types").EnumerateEvents<TBot> extends infer T_7 ? { [K in keyof T_7]: utils.types.Merge<import("@botpress/client").Event, {
            type: K;
            payload: import("./types").EnumerateEvents<TBot>[K];
        }>; } : never) & {
            '*': import("./server").IncomingEvent<TBot>;
        } extends infer T_37 ? { [T_38 in keyof T_37]: {
            client: import("./client").BotSpecificClient<TBot>;
            ctx: import("./server").BotContext;
            data: ((import("./types").EnumerateEvents<TBot> extends infer T_7 ? { [K in keyof T_7]: utils.types.Merge<import("@botpress/client").Event, {
                type: K;
                payload: import("./types").EnumerateEvents<TBot>[K];
            }>; } : never) & {
                '*': import("./server").IncomingEvent<TBot>;
            })[T_38];
        }; } : never)[T_36]) => Promise<void | ((import("./types").EnumerateEvents<TBot> extends infer T_7 ? { [K in keyof T_7]: utils.types.Merge<import("@botpress/client").Event, {
            type: K;
            payload: import("./types").EnumerateEvents<TBot>[K];
        }>; } : never) & {
            '*': import("./server").IncomingEvent<TBot>;
        } extends infer T_39 ? { [T_40 in keyof T_39]: {
            data: ((import("./types").EnumerateEvents<TBot> extends infer T_7 ? { [K in keyof T_7]: utils.types.Merge<import("@botpress/client").Event, {
                type: K;
                payload: import("./types").EnumerateEvents<TBot>[K];
            }>; } : never) & {
                '*': import("./server").IncomingEvent<TBot>;
            })[T_40];
        }; } : never)[T_36] | undefined>; } : never)[T_34]) => void;
        after_incoming_message: <T_41 extends "*" | keyof import("./types").GetMessages<TBot>>(type: T_41, handler: ((import("./types").GetMessages<TBot> extends infer T_15 ? { [K_1 in keyof T_15]: utils.types.Merge<import("@botpress/client").Message, {
            type: K_1;
            payload: import("./types").GetMessages<TBot>[K_1];
        }>; } : never) & {
            '*': import("./server").IncomingMessage<TBot>;
        } extends infer T_42 ? { [T_43 in keyof T_42]: (input: ((import("./types").GetMessages<TBot> extends infer T_15 ? { [K_1 in keyof T_15]: utils.types.Merge<import("@botpress/client").Message, {
            type: K_1;
            payload: import("./types").GetMessages<TBot>[K_1];
        }>; } : never) & {
            '*': import("./server").IncomingMessage<TBot>;
        } extends infer T_44 ? { [T_45 in keyof T_44]: {
            client: import("./client").BotSpecificClient<TBot>;
            ctx: import("./server").BotContext;
            data: ((import("./types").GetMessages<TBot> extends infer T_15 ? { [K_1 in keyof T_15]: utils.types.Merge<import("@botpress/client").Message, {
                type: K_1;
                payload: import("./types").GetMessages<TBot>[K_1];
            }>; } : never) & {
                '*': import("./server").IncomingMessage<TBot>;
            })[T_45];
        }; } : never)[T_43]) => Promise<void | ((import("./types").GetMessages<TBot> extends infer T_15 ? { [K_1 in keyof T_15]: utils.types.Merge<import("@botpress/client").Message, {
            type: K_1;
            payload: import("./types").GetMessages<TBot>[K_1];
        }>; } : never) & {
            '*': import("./server").IncomingMessage<TBot>;
        } extends infer T_46 ? { [T_47 in keyof T_46]: {
            data: ((import("./types").GetMessages<TBot> extends infer T_15 ? { [K_1 in keyof T_15]: utils.types.Merge<import("@botpress/client").Message, {
                type: K_1;
                payload: import("./types").GetMessages<TBot>[K_1];
            }>; } : never) & {
                '*': import("./server").IncomingMessage<TBot>;
            })[T_47];
        }; } : never)[T_43] | undefined>; } : never)[T_41]) => void;
        after_outgoing_message: <T_48 extends "*" | keyof import("./types").GetMessages<TBot>>(type: T_48, handler: ((import("./types").GetMessages<TBot> extends infer T_53 ? { [K_4 in keyof T_53]: utils.types.Merge<{
            message: {
                id: string;
                createdAt: string;
                type: string;
                payload: {
                    [x: string]: any;
                };
                direction: "incoming" | "outgoing";
                userId: string;
                conversationId: string;
                tags: {
                    [x: string]: string;
                };
            };
        }, {
            message: utils.types.Merge<import("@botpress/client").Message, {
                type: K_4;
                payload: import("./types").GetMessages<TBot>[K_4];
            }>;
        }>; } : never) & {
            '*': import("./server").OutgoingMessageResponse<TBot>;
        } extends infer T_49 ? { [T_50 in keyof T_49]: (input: ((import("./types").GetMessages<TBot> extends infer T_53 ? { [K_4 in keyof T_53]: utils.types.Merge<{
            message: {
                id: string;
                createdAt: string;
                type: string;
                payload: {
                    [x: string]: any;
                };
                direction: "incoming" | "outgoing";
                userId: string;
                conversationId: string;
                tags: {
                    [x: string]: string;
                };
            };
        }, {
            message: utils.types.Merge<import("@botpress/client").Message, {
                type: K_4;
                payload: import("./types").GetMessages<TBot>[K_4];
            }>;
        }>; } : never) & {
            '*': import("./server").OutgoingMessageResponse<TBot>;
        } extends infer T_51 ? { [T_52 in keyof T_51]: {
            client: import("./client").BotSpecificClient<TBot>;
            ctx: import("./server").BotContext;
            data: ((import("./types").GetMessages<TBot> extends infer T_53 ? { [K_4 in keyof T_53]: utils.types.Merge<{
                message: {
                    id: string;
                    createdAt: string;
                    type: string;
                    payload: {
                        [x: string]: any;
                    };
                    direction: "incoming" | "outgoing";
                    userId: string;
                    conversationId: string;
                    tags: {
                        [x: string]: string;
                    };
                };
            }, {
                message: utils.types.Merge<import("@botpress/client").Message, {
                    type: K_4;
                    payload: import("./types").GetMessages<TBot>[K_4];
                }>;
            }>; } : never) & {
                '*': import("./server").OutgoingMessageResponse<TBot>;
            })[T_52];
        }; } : never)[T_50]) => Promise<void | ((import("./types").GetMessages<TBot> extends infer T_53 ? { [K_4 in keyof T_53]: utils.types.Merge<{
            message: {
                id: string;
                createdAt: string;
                type: string;
                payload: {
                    [x: string]: any;
                };
                direction: "incoming" | "outgoing";
                userId: string;
                conversationId: string;
                tags: {
                    [x: string]: string;
                };
            };
        }, {
            message: utils.types.Merge<import("@botpress/client").Message, {
                type: K_4;
                payload: import("./types").GetMessages<TBot>[K_4];
            }>;
        }>; } : never) & {
            '*': import("./server").OutgoingMessageResponse<TBot>;
        } extends infer T_54 ? { [T_55 in keyof T_54]: {
            data: ((import("./types").GetMessages<TBot> extends infer T_53 ? { [K_4 in keyof T_53]: utils.types.Merge<{
                message: {
                    id: string;
                    createdAt: string;
                    type: string;
                    payload: {
                        [x: string]: any;
                    };
                    direction: "incoming" | "outgoing";
                    userId: string;
                    conversationId: string;
                    tags: {
                        [x: string]: string;
                    };
                };
            }, {
                message: utils.types.Merge<import("@botpress/client").Message, {
                    type: K_4;
                    payload: import("./types").GetMessages<TBot>[K_4];
                }>;
            }>; } : never) & {
                '*': import("./server").OutgoingMessageResponse<TBot>;
            })[T_55];
        }; } : never)[T_50] | undefined>; } : never)[T_48]) => void;
        after_call_action: <T_56 extends "*" | keyof import("./types").EnumerateActions<TBot>>(type: T_56, handler: ((import("./types").EnumerateActionOutputs<TBot> extends infer T_61 ? { [K_5 in keyof T_61]: utils.types.Merge<{
            output: {
                [x: string]: any;
            };
            meta: {
                cached: boolean;
            };
        }, {
            output: import("./types").EnumerateActionOutputs<TBot>[K_5];
        }>; } : never) & {
            '*': import("./server").OutgoingCallActionResponse<TBot>;
        } extends infer T_57 ? { [T_58 in keyof T_57]: (input: ((import("./types").EnumerateActionOutputs<TBot> extends infer T_61 ? { [K_5 in keyof T_61]: utils.types.Merge<{
            output: {
                [x: string]: any;
            };
            meta: {
                cached: boolean;
            };
        }, {
            output: import("./types").EnumerateActionOutputs<TBot>[K_5];
        }>; } : never) & {
            '*': import("./server").OutgoingCallActionResponse<TBot>;
        } extends infer T_59 ? { [T_60 in keyof T_59]: {
            client: import("./client").BotSpecificClient<TBot>;
            ctx: import("./server").BotContext;
            data: ((import("./types").EnumerateActionOutputs<TBot> extends infer T_61 ? { [K_5 in keyof T_61]: utils.types.Merge<{
                output: {
                    [x: string]: any;
                };
                meta: {
                    cached: boolean;
                };
            }, {
                output: import("./types").EnumerateActionOutputs<TBot>[K_5];
            }>; } : never) & {
                '*': import("./server").OutgoingCallActionResponse<TBot>;
            })[T_60];
        }; } : never)[T_58]) => Promise<void | ((import("./types").EnumerateActionOutputs<TBot> extends infer T_61 ? { [K_5 in keyof T_61]: utils.types.Merge<{
            output: {
                [x: string]: any;
            };
            meta: {
                cached: boolean;
            };
        }, {
            output: import("./types").EnumerateActionOutputs<TBot>[K_5];
        }>; } : never) & {
            '*': import("./server").OutgoingCallActionResponse<TBot>;
        } extends infer T_62 ? { [T_63 in keyof T_62]: {
            data: ((import("./types").EnumerateActionOutputs<TBot> extends infer T_61 ? { [K_5 in keyof T_61]: utils.types.Merge<{
                output: {
                    [x: string]: any;
                };
                meta: {
                    cached: boolean;
                };
            }, {
                output: import("./types").EnumerateActionOutputs<TBot>[K_5];
            }>; } : never) & {
                '*': import("./server").OutgoingCallActionResponse<TBot>;
            })[T_63];
        }; } : never)[T_58] | undefined>; } : never)[T_56]) => void;
    };
    readonly handler: (req: import("../serve").Request) => Promise<void | import("../serve").Response>;
    readonly start: (port?: number) => Promise<Server>;
}
