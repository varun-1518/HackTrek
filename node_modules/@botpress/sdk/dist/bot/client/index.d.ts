import * as client from '@botpress/client';
import * as common from '../types';
import * as types from './types';
export * from './types';
/**
 * Just like the regular botpress client, but typed with the bot's properties.
 */
export declare class BotSpecificClient<TBot extends common.BaseBot> implements types.ClientOperations<TBot> {
    private _client;
    private _hooks;
    constructor(_client: client.Client, _hooks?: types.ClientHooks);
    getConversation: types.GetConversation<TBot>;
    listConversations: types.ListConversations<TBot>;
    updateConversation: types.UpdateConversation<TBot>;
    deleteConversation: types.DeleteConversation<TBot>;
    listParticipants: types.ListParticipants<TBot>;
    addParticipant: types.AddParticipant<TBot>;
    getParticipant: types.GetParticipant<TBot>;
    removeParticipant: types.RemoveParticipant<TBot>;
    getEvent: types.GetEvent<TBot>;
    listEvents: types.ListEvents<TBot>;
    createMessage: types.CreateMessage<TBot>;
    getOrCreateMessage: types.GetOrCreateMessage<TBot>;
    getMessage: types.GetMessage<TBot>;
    updateMessage: types.UpdateMessage<TBot>;
    listMessages: types.ListMessages<TBot>;
    deleteMessage: types.DeleteMessage<TBot>;
    getUser: types.GetUser<TBot>;
    listUsers: types.ListUsers<TBot>;
    updateUser: types.UpdateUser<TBot>;
    deleteUser: types.DeleteUser<TBot>;
    getState: types.GetState<TBot>;
    setState: types.SetState<TBot>;
    getOrSetState: types.GetOrSetState<TBot>;
    patchState: types.PatchState<TBot>;
    callAction: types.CallAction<TBot>;
    uploadFile: types.UploadFile<TBot>;
    upsertFile: types.UpsertFile<TBot>;
    deleteFile: types.DeleteFile<TBot>;
    listFiles: types.ListFiles<TBot>;
    getFile: types.GetFile<TBot>;
    updateFileMetadata: types.UpdateFileMetadata<TBot>;
    searchFiles: types.SearchFiles<TBot>;
    /**
     * @deprecated Use `callAction` to delegate the conversation creation to an integration.
     */
    createConversation: types.CreateConversation<TBot>;
    /**
     * @deprecated Use `callAction` to delegate the conversation creation to an integration.
     */
    getOrCreateConversation: types.GetOrCreateConversation<TBot>;
    /**
     * @deprecated Use `callAction` to delegate the user creation to an integration.
     */
    createUser: types.CreateUser<TBot>;
    /**
     * @deprecated Use `callAction` to delegate the user creation to an integration.
     */
    getOrCreateUser: types.GetOrCreateUser<TBot>;
    private _run;
}
