import { z } from '../../zui';
declare const schemaName: unique symbol;
type BaseSchemas = Record<string, z.ZodSchema>;
export type SchemaStoreProps<TSchemas extends BaseSchemas = BaseSchemas> = {
    [K in keyof TSchemas]: {
        schema: TSchemas[K];
    };
};
export type BrandedSchema<TSchema extends BaseSchemas[string] = BaseSchemas[string]> = {
    schema: TSchema;
    [schemaName]: string;
};
export type SchemaStore<TSchemas extends BaseSchemas = BaseSchemas> = {
    [K in keyof TSchemas]: BrandedSchema<TSchemas[K]>;
};
export declare const createStore: <TSchemas extends BaseSchemas>(props: SchemaStoreProps<TSchemas> | undefined) => SchemaStore<TSchemas>;
export declare const isBranded: (schema: BrandedSchema<z.Schema<any, import("@bpinternal/zui").ZodTypeDef, any>> | {
    schema: z.ZodSchema;
}) => schema is BrandedSchema<z.Schema<any, import("@bpinternal/zui").ZodTypeDef, any>>;
export declare const getName: (schema: BrandedSchema) => string;
export {};
