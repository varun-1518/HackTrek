import { InterfacePackage } from '../../package';
import { z } from '../../zui';
import { SchemaStore, BrandedSchema } from './branded-schema';
import { BaseConfig, BaseEvents, BaseActions, BaseChannels, BaseStates, BaseEntities, BaseConfigs } from './generic';
import { ConfigurationDefinition, EventDefinition, ChannelDefinition, ActionDefinition, StateDefinition, UserDefinition, SecretDefinition, EntityDefinition, AdditionalConfigurationDefinition } from './types';
export * from './types';
export type InterfaceInstance = InterfacePackage & {
    entities: Record<string, {
        name: string;
        schema: z.AnyZodObject;
    }>;
};
export type IntegrationDefinitionProps<TConfig extends BaseConfig = BaseConfig, TConfigs extends BaseConfigs = BaseConfigs, TEvents extends BaseEvents = BaseEvents, TActions extends BaseActions = BaseActions, TChannels extends BaseChannels = BaseChannels, TStates extends BaseStates = BaseStates, TEntities extends BaseEntities = BaseEntities> = {
    name: string;
    version: string;
    title?: string;
    description?: string;
    icon?: string;
    readme?: string;
    identifier?: {
        extractScript?: string;
        fallbackHandlerScript?: string;
    };
    configuration?: ConfigurationDefinition<TConfig>;
    configurations?: {
        [K in keyof TConfigs]: AdditionalConfigurationDefinition<TConfigs[K]>;
    };
    events?: {
        [K in keyof TEvents]: EventDefinition<TEvents[K]>;
    };
    actions?: {
        [K in keyof TActions]: ActionDefinition<TActions[K]>;
    };
    channels?: {
        [K in keyof TChannels]: ChannelDefinition<TChannels[K]>;
    };
    states?: {
        [K in keyof TStates]: StateDefinition<TStates[K]>;
    };
    user?: UserDefinition;
    secrets?: Record<string, SecretDefinition>;
    entities?: {
        [K in keyof TEntities]: EntityDefinition<TEntities[K]>;
    };
    interfaces?: Record<string, InterfaceInstance>;
};
type EntitiesOfPackage<TPackage extends InterfacePackage> = {
    [K in keyof TPackage['definition']['entities']]: NonNullable<TPackage['definition']['entities']>[K]['schema'];
};
type ExtensionBuilderInput<TIntegrationEntities extends BaseEntities> = SchemaStore<TIntegrationEntities>;
type ExtensionBuilderOutput<TInterfaceEntities extends BaseEntities> = {
    [K in keyof TInterfaceEntities]: BrandedSchema<z.ZodSchema<z.infer<TInterfaceEntities[K]>>>;
};
type ExtensionBuilder<TIntegrationEntities extends BaseEntities, TInterfaceEntities extends BaseEntities> = (input: ExtensionBuilderInput<TIntegrationEntities>) => ExtensionBuilderOutput<TInterfaceEntities>;
export declare class IntegrationDefinition<TConfig extends BaseConfig = BaseConfig, TConfigs extends BaseConfigs = BaseConfigs, TEvents extends BaseEvents = BaseEvents, TActions extends BaseActions = BaseActions, TChannels extends BaseChannels = BaseChannels, TStates extends BaseStates = BaseStates, TEntities extends BaseEntities = BaseEntities> {
    readonly props: IntegrationDefinitionProps<TConfig, TConfigs, TEvents, TActions, TChannels, TStates, TEntities>;
    readonly name: this['props']['name'];
    readonly version: this['props']['version'];
    readonly title: this['props']['title'];
    readonly description: this['props']['description'];
    readonly icon: this['props']['icon'];
    readonly readme: this['props']['readme'];
    readonly configuration: this['props']['configuration'];
    readonly configurations: this['props']['configurations'];
    readonly events: this['props']['events'];
    readonly actions: this['props']['actions'];
    readonly channels: this['props']['channels'];
    readonly states: this['props']['states'];
    readonly user: this['props']['user'];
    readonly secrets: this['props']['secrets'];
    readonly identifier: this['props']['identifier'];
    readonly entities: this['props']['entities'];
    readonly interfaces: this['props']['interfaces'];
    constructor(props: IntegrationDefinitionProps<TConfig, TConfigs, TEvents, TActions, TChannels, TStates, TEntities>);
    extend<P extends InterfacePackage>(interfacePkg: P, builder: ExtensionBuilder<TEntities, EntitiesOfPackage<P>>): this;
}
