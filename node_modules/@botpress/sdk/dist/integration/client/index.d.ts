import * as client from '@botpress/client';
import * as common from '../types';
import * as types from './types';
export * from './types';
/**
 * Just like the regular botpress client, but typed with the integration's properties.
 */
export declare class IntegrationSpecificClient<TIntegration extends common.BaseIntegration> implements types.ClientOperations<TIntegration> {
    private readonly _client;
    constructor(_client: client.Client);
    createConversation: types.CreateConversation<TIntegration>;
    getConversation: types.GetConversation<TIntegration>;
    listConversations: types.ListConversations<TIntegration>;
    getOrCreateConversation: types.GetOrCreateConversation<TIntegration>;
    updateConversation: types.UpdateConversation<TIntegration>;
    deleteConversation: types.DeleteConversation<TIntegration>;
    listParticipants: types.ListParticipants<TIntegration>;
    addParticipant: types.AddParticipant<TIntegration>;
    getParticipant: types.GetParticipant<TIntegration>;
    removeParticipant: types.RemoveParticipant<TIntegration>;
    createEvent: types.CreateEvent<TIntegration>;
    getEvent: types.GetEvent<TIntegration>;
    listEvents: types.ListEvents<TIntegration>;
    createMessage: types.CreateMessage<TIntegration>;
    getOrCreateMessage: types.GetOrCreateMessage<TIntegration>;
    getMessage: types.GetMessage<TIntegration>;
    updateMessage: types.UpdateMessage<TIntegration>;
    listMessages: types.ListMessages<TIntegration>;
    deleteMessage: types.DeleteMessage<TIntegration>;
    createUser: types.CreateUser<TIntegration>;
    getUser: types.GetUser<TIntegration>;
    listUsers: types.ListUsers<TIntegration>;
    getOrCreateUser: types.GetOrCreateUser<TIntegration>;
    updateUser: types.UpdateUser<TIntegration>;
    deleteUser: types.DeleteUser<TIntegration>;
    getState: types.GetState<TIntegration>;
    setState: types.SetState<TIntegration>;
    getOrSetState: types.GetOrSetState<TIntegration>;
    patchState: types.PatchState<TIntegration>;
    configureIntegration: types.ConfigureIntegration<TIntegration>;
    uploadFile: types.UploadFile<TIntegration>;
    upsertFile: types.UpsertFile<TIntegration>;
    deleteFile: types.DeleteFile<TIntegration>;
    listFiles: types.ListFiles<TIntegration>;
    getFile: types.GetFile<TIntegration>;
    updateFileMetadata: types.UpdateFileMetadata<TIntegration>;
}
